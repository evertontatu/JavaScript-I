{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["stores","version","dbName","connection","close","ConnectionFactory","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;AAAA,IAAMA,SAAS,CAAC,aAAD,CAAf;AACA,IAAMC,UAAU,CAAhB;AACA,IAAMC,SAAS,WAAf;;AAEA,IAAIC,aAAa,IAAjB;;AAEA,IAAIC,QAAQ,IAAZ;;IAEaC,iB,WAAAA,iB;AAET,iCAAc;AAAA;;AACV,cAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;AACH;;;;wCAEsB;AACnB,mBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,oBAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBX,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAS,4BAAYI,eAAZ,GAA8B,aAAK;;AAE/BT,sCAAkBU,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AAEH,iBAJD;;AAMAR,4BAAYS,SAAZ,GAAwB,aAAK;;AAEzB,wBAAG,CAAChB,UAAJ,EAAgB;AACZA,qCAAaa,EAAEC,MAAF,CAASC,MAAtB;AACAd,gCAAQD,WAAWC,KAAX,CAAiBgB,IAAjB,CAAsBjB,UAAtB,CAAR;AACAA,mCAAWC,KAAX,GAAmB,YAAW;AAC1B,kCAAM,IAAIE,KAAJ,CAAU,4CAAV,CAAN;AACH,yBAFD;AAGH;AACDE,4BAAQL,UAAR;AAEH,iBAXD;;AAaAO,4BAAYW,OAAZ,GAAsB,aAAK;AACvBC,4BAAQC,GAAR,CAAYP,EAAEC,MAAF,CAASO,KAArB;;AAEAf,2BAAOO,EAAEC,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACH,iBAJD;AAKH,aA5BM,CAAP;AA6BH;;;sCAEoBtB,U,EAAY;;AAE7BH,mBAAO0B,OAAP,CAAe,iBAAS;AACpB,oBAAIvB,WAAWwB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAJ,EAAiD1B,WAAW2B,iBAAX,CAA6BD,KAA7B;;AAEjD1B,2BAAW4B,iBAAX,CAA6BF,KAA7B,EAAoC,EAACG,eAAe,IAAhB,EAApC;AACH,aAJD;AAKH;;;0CAEwB;;AAErB,gBAAG7B,UAAH,EAAe;AACXC;AACAD,6BAAa,IAAb;AACH;AACJ","file":"ConnectionFactory.js","sourcesContent":["const stores = ['negociacoes'];\nconst version = 5;\nconst dbName = 'boniframe';\n\nlet connection = null;\n\nlet close = null;\n\nexport class ConnectionFactory {\n\n    constructor() {\n        throw new Error('Não é possível criar instâncias de ConnectionFactory');\n    }\n\n    static getConnection() {\n        return new Promise((resolve, reject) => {\n\n            let openRequest = window.indexedDB.open(dbName, version);\n\n            openRequest.onupgradeneeded = e => {\n\n                ConnectionFactory._createStores(e.target.result);\n\n            };\n\n            openRequest.onsuccess = e => {\n\n                if(!connection) {\n                    connection = e.target.result;\n                    close = connection.close.bind(connection);\n                    connection.close = function() {\n                        throw new Error('Você não pode fechar diretamente a conexão');\n                    };\n                }\n                resolve(connection);\n\n            };\n\n            openRequest.onerror = e => {\n                console.log(e.target.error);\n\n                reject(e.target.error.name);\n            };\n        });\n    }\n\n    static _createStores(connection) {\n\n        stores.forEach(store => {\n            if (connection.objectStoreNames.contains(store)) connection.deleteObjectStore(store);\n\n            connection.createObjectStore(store, {autoIncrement: true});\n        });\n    }\n\n    static closeConnection() {\n\n        if(connection) {\n            close();\n            connection = null;\n        }\n    }\n}\n"]}