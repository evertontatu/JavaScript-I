{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["ConnectionFactory","stores","version","dbName","connection","close","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;AAAA,IAAIA,oBAAqB,YAAY;;AAEjC,QAAMC,SAAS,CAAC,aAAD,CAAf;AACA,QAAMC,UAAU,CAAhB;AACA,QAAMC,SAAS,WAAf;;AAEA,QAAIC,aAAa,IAAjB;;AAEA,QAAIC,QAAQ,IAAZ;;AAEA;AAEI,qCAAc;AAAA;;AACV,kBAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;AACH;;AAJL;AAAA;AAAA,4CAM2B;AACnB,uBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,wBAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBV,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAQ,gCAAYI,eAAZ,GAA8B,aAAK;;AAE/Bd,0CAAkBe,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AAEH,qBAJD;;AAMAR,gCAAYS,SAAZ,GAAwB,aAAK;;AAEzB,4BAAG,CAACf,UAAJ,EAAgB;AACZA,yCAAaY,EAAEC,MAAF,CAASC,MAAtB;AACAb,oCAAQD,WAAWC,KAAX,CAAiBe,IAAjB,CAAsBhB,UAAtB,CAAR;AACAA,uCAAWC,KAAX,GAAmB,YAAW;AAC1B,sCAAM,IAAIC,KAAJ,CAAU,4CAAV,CAAN;AACH,6BAFD;AAGH;AACDE,gCAAQJ,UAAR;AAEH,qBAXD;;AAaAM,gCAAYW,OAAZ,GAAsB,aAAK;AACvBC,gCAAQC,GAAR,CAAYP,EAAEC,MAAF,CAASO,KAArB;;AAEAf,+BAAOO,EAAEC,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACH,qBAJD;AAKH,iBA5BM,CAAP;AA6BH;AApCL;AAAA;AAAA,0CAsCyBrB,UAtCzB,EAsCqC;;AAE7BH,uBAAOyB,OAAP,CAAe,iBAAS;AACpB,wBAAItB,WAAWuB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAJ,EAAiDzB,WAAW0B,iBAAX,CAA6BD,KAA7B;;AAEjDzB,+BAAW2B,iBAAX,CAA6BF,KAA7B,EAAoC,EAACG,eAAe,IAAhB,EAApC;AACH,iBAJD;AAKH;AA7CL;AAAA;AAAA,8CA+C6B;;AAErB,oBAAG5B,UAAH,EAAe;AACXC;AACAD,iCAAa,IAAb;AACH;AACJ;AArDL;;AAAA;AAAA;AAyDH,CAnEuB,EAAxB","file":"ConnectionFactory.js","sourcesContent":["var ConnectionFactory = (function () {\n\n    const stores = ['negociacoes'];\n    const version = 5;\n    const dbName = 'boniframe';\n\n    var connection = null;\n\n    var close = null;\n\n    return class ConnectionFactory {\n\n        constructor() {\n            throw new Error('Não é possível criar instâncias de ConnectionFactory');\n        }\n\n        static getConnection() {\n            return new Promise((resolve, reject) => {\n\n                let openRequest = window.indexedDB.open(dbName, version);\n\n                openRequest.onupgradeneeded = e => {\n\n                    ConnectionFactory._createStores(e.target.result);\n\n                };\n\n                openRequest.onsuccess = e => {\n\n                    if(!connection) {\n                        connection = e.target.result;\n                        close = connection.close.bind(connection);\n                        connection.close = function() {\n                            throw new Error('Você não pode fechar diretamente a conexão');\n                        };\n                    }\n                    resolve(connection);\n\n                };\n\n                openRequest.onerror = e => {\n                    console.log(e.target.error);\n\n                    reject(e.target.error.name);\n                };\n            });\n        }\n\n        static _createStores(connection) {\n\n            stores.forEach(store => {\n                if (connection.objectStoreNames.contains(store)) connection.deleteObjectStore(store);\n\n                connection.createObjectStore(store, {autoIncrement: true});\n            });\n        }\n\n        static closeConnection() {\n\n            if(connection) {\n                close();\n                connection = null;\n            }\n        }\n    }\n\n\n})();\n"]}